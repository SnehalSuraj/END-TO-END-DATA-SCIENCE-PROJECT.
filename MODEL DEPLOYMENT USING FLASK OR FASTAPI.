from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
import os
os.getcwd()
df = pd.read_csv("housing.csv")
df.head()
df.info()
df.columns
df['date'] = pd.to_datetime(df['date'], errors='coerce')
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day
df['weekday'] = df['date'].dt.weekday
df = df.drop(columns=['date'])
df.head()
x = df.drop(columns=['price'])
y = df['price']
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x
y
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)
MAE=mean_absolute_error(y_test, y_pred)
MAE
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print (mean_absolute_error(y_test, y_pred))
with open("house_price_model.pkl", "wb") as f:
    pickle.dump(model, f)
import pickle
import numpy as np
from flask import Flask, request, jsonify
with open("scaler.pkl", "wb") as f:
    pickle.dump(scaler, f)
app = Flask(__name__)
@app.route('/')
def home():
    return "Welcome to the House API!"
# Load trained model and scaler
with open("house_price_model.pkl", "rb") as f:
    model = pickle.load(f)
with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)
@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    input_features = np.array([data['features']])
    input_features = scaler.transform(input_features)
    predicted_price = model.predict(input_features)[0]
    return jsonify({"predicted_price": round(predicted_price, 2)})
if __name__ == "__main__":
     app.run(debug=True, use_reloader=False)
